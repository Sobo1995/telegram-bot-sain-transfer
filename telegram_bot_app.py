
import os
import re
import requests
from flask import Flask, request

TOKEN = "7913606596:AAFnw_ur4a5U0hs2mbeD-kAeZwIXJY89-pI"
BOT_URL = f"https://api.telegram.org/bot{TOKEN}"
WEBHOOK_URL = f"https://telegram-bot-sain-transfer.onrender.com/{TOKEN}"

app = Flask(__name__)

user_states = {}
user_data = {}
form_questions = [
    "1. –•“Ø–ª—ç—ç–Ω –∞–≤–∞–≥—á–∏–π–Ω –Ω—ç—Ä?",
    "2. –ë–∞–Ω–∫–Ω—ã –Ω—ç—Ä?",
    "3. –î–∞–Ω—Å–Ω—ã –¥—É–≥–∞–∞—Ä?",
    "4. –ò–ª–≥—ç—ç–≥—á–∏–π–Ω –Ω—ç—Ä?",
    "5. –£—Ç–∞—Å–Ω—ã –¥—É–≥–∞–∞—Ä?",
    "6. –ì“Ø–π–ª–≥—ç—ç–Ω–∏–π —É—Ç–≥–∞?",
    "7. –ë–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç (–∑—É—Ä–∞–≥, —Ñ–∞–π–ª) –∏–ª–≥—ç—ç–Ω—ç “Ø“Ø:"
]

def set_webhook():
    try:
        res = requests.post(f"{BOT_URL}/setWebhook", data={"url": WEBHOOK_URL})
        print("‚úÖ Webhook set:", res.json())
    except Exception as e:
        print("‚ùå Webhook error:", e)

def send_message(chat_id, text, reply_markup=None):
    payload = {"chat_id": chat_id, "text": text}
    if reply_markup:
        payload["reply_markup"] = reply_markup
    requests.post(f"{BOT_URL}/sendMessage", json=payload)

def normalize_input(text):
    replace_map = {
        "hansh": "—Ö–∞–Ω—à", "shimtgel": "—à–∏–º—Ç–≥—ç–ª", "barimt": "–±–∞—Ä–∏–º—Ç", "bichig": "–±–∏—á–∏–≥",
        "tuhai": "—Ç—É—Ö–∞–π", "bidnii": "–±–∏–¥–Ω–∏–π", "guivuulga": "–≥—É–π–≤—É—É–ª–≥–∞", "utas": "—É—Ç–∞—Å",
        "dans": "–¥–∞–Ω—Å", "dugaar": "–¥—É–≥–∞–∞—Ä", "form": "/form", "menu": "/start"
    }
    for latin, cyrillic in replace_map.items():
        text = re.sub(rf"\b{latin}\b", cyrillic, text)
    return text

def calculate_fee(amount):
    amount = int(amount)
    if amount <= 100000:
        fee, yuan = 3000, 30
    elif amount <= 1000000:
        fee, yuan = 5000, 50
    elif amount <= 2000000:
        fee, yuan = 5000, 100
    elif amount <= 5000000:
        fee, yuan = 10000, 100
    elif amount <= 10000000:
        fee, yuan = 20000, 100
    else:
        fee, yuan = 25000, 100
    net = amount - fee
    rate = 462
    return f"üí± {amount:,}‚ÇÆ ‚Üí –®–∏–º—Ç–≥—ç–ª: {fee:,}‚ÇÆ + {yuan}¬• ‚Üí {net // rate}¬• –æ—Ä—á–∏–º"

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = request.json
    message = update.get("message") or {}
    callback = update.get("callback_query")

    if message:
        chat_id = message["chat"]["id"]
        user_id = message["from"]["id"]
        text = message.get("text", "")
        normalized = normalize_input(text.lower())

        if user_id in user_states:
            step = user_states[user_id]
            if step < len(form_questions) - 1:
                user_data.setdefault(user_id, {})[f"q{step+1}"] = text
                user_states[user_id] += 1
                send_message(chat_id, form_questions[user_states[user_id]])
            else:
                if "document" in message or "photo" in message:
                    send_message(chat_id, "‚úÖ –ë“Ø—Ö –º—ç–¥—ç—ç–ª—ç–ª –±“Ø—Ä—Ç–≥—ç–≥–¥–ª—ç—ç. –ë–∞—è—Ä–ª–∞–ª–∞–∞!")
                    user_states.pop(user_id, None)
                    user_data.pop(user_id, None)
                else:
                    send_message(chat_id, "üìé –ó—É—Ä–∞–≥ —ç—Å–≤—ç–ª —Ñ–∞–π–ª —Ö–∞–≤—Å–∞—Ä–≥–∞–Ω–∞ —É—É.")
            return "ok"

        if normalized == "/form":
            user_states[user_id] = 0
            user_data[user_id] = {}
            send_message(chat_id, "üìã –ì—É–π–≤—É—É–ª–≥—ã–Ω —Ñ–æ—Ä–º —ç—Ö—ç–ª–ª—ç—ç:")
            send_message(chat_id, form_questions[0])
            return "ok"

        if normalized in ["/start", "–º–µ–Ω—é", "—ç—Ö–ª—ç—Ö"]:
            keyboard = {
                "inline_keyboard": [
                    [{"text": "üìã –ì—É–π–≤—É—É–ª–≥—ã–Ω —Ñ–æ—Ä–º", "callback_data": "/form"}],
                    [{"text": "üìà –•–∞–Ω—à", "callback_data": "—Ö–∞–Ω—à"}],
                    [{"text": "üí∏ –®–∏–º—Ç–≥—ç–ª", "callback_data": "—à–∏–º—Ç–≥—ç–ª"}],
                    [{"text": "üìÑ –ë–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç", "callback_data": "–±–∞—Ä–∏–º—Ç"}],
                    [{"text": "‚ÑπÔ∏è –ë–∏–¥–Ω–∏–π —Ç—É—Ö–∞–π", "callback_data": "—Ç—É—Ö–∞–π"}]
                ]
            }
            send_message(chat_id, "–¢–∞ –¥–æ–æ—Ä—Ö —Ü—ç—Å–Ω—ç—ç—Å —Å–æ–Ω–≥–æ–Ω–æ —É—É:", reply_markup=keyboard)
            return "ok"

        if "—Ö–∞–Ω—à" in normalized:
            send_message(chat_id, "üìà –ú–∞–Ω–∞–π —Ö–∞–Ω—à: 1 —é–∞–Ω—å = 462‚ÇÆ")
        elif "—à–∏–º—Ç–≥—ç–ª" in normalized:
            send_message(chat_id, "üí∞ –®–∏–º—Ç–≥—ç–ª–∏–π–Ω —à–∞—Ç–ª–∞–ª:
1¬•-1,000¬• = 3,000‚ÇÆ + 30¬•
... ‚Üí 100,000¬•+ = 25,000‚ÇÆ + 100¬•")
        elif "—É—Ç–∞—Å" in normalized:
            send_message(chat_id, "üìû –£—Ç–∞—Å: 80908090")
        elif "–¥–∞–Ω—Å" in normalized:
            send_message(chat_id, "üè¶ –î–∞–Ω—Å:
–•–∞–∞–Ω: 5077407759
–•–•–ë: 431004884
–ì–æ–ª–æ–º—Ç: 3635112076
–¢”©—Ä–∏–π–Ω –±–∞–Ω–∫: 343200497501
–•–∞—Å: 5002742902")
        elif "–±–∞—Ä–∏–º—Ç" in normalized or "–±–∏—á–∏–≥" in normalized:
            send_message(chat_id, "üìÑ –®–∞–∞—Ä–¥–ª–∞–≥–∞—Ç–∞–π –±–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç:
- –ò–ª–≥—ç—ç–≥—á–∏–π–Ω –±–∞—Ä–∏–º—Ç
- –•“Ø–ª—ç—ç–Ω –∞–≤–∞–≥—á–∏–π–Ω –¥–∞–Ω—Å
- –ì“Ø–π–ª–≥—ç—ç–Ω–∏–π —É—Ç–≥–∞")
        elif "—Ç—É—Ö–∞–π" in normalized:
            send_message(chat_id, "üìå –ë–∏–¥–Ω–∏–π —Ç—É—Ö–∞–π:
7 –¥–∞—Ö—å –∂–∏–ª–¥—ç—ç —é–∞–Ω–∏–π–Ω —à–∏–ª–∂“Ø“Ø–ª—ç–≥—Ç –º—ç—Ä–≥—ç—à–∏–Ω –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞.
–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–¥ —Å—É—É—Ä–∏–ª—Å–∞–Ω, –∞–ª–±–∞–Ω —ë—Å–Ω—ã “Ø–π–ª—á–∏–ª–≥—ç—ç.")
        elif re.search(r"\d+", text):
            num = re.sub("[^\d]", "", text)
            if num:
                send_message(chat_id, calculate_fee(num))
        else:
            send_message(chat_id, "ü§ñ –¢–∞ —Ç“Ø–ª—Ö“Ø“Ø—Ä “Ø–≥ (—Ö–∞–Ω—à, —à–∏–º—Ç–≥—ç–ª...) —ç—Å–≤—ç–ª —Ç–æ–æ–Ω –¥“Ø–Ω –æ—Ä—É—É–ª–Ω–∞ —É—É. /menu –≥—ç–∂ –±–∏—á–∏–∂ –±–æ–ª–Ω–æ.")

    elif callback:
        chat_id = callback["message"]["chat"]["id"]
        data = callback["data"]
        update = {"message": {"chat": {"id": chat_id}, "text": data, "from": callback["from"]}}
        request.json.update(update)
        return webhook()

    return "ok"

if __name__ == "__main__":
    set_webhook()
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
