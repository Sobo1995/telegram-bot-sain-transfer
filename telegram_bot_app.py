
import os
import logging
from flask import Flask, request
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Dispatcher, CommandHandler, MessageHandler, Filters

TOKEN = "7913606596:AAFnw_ur4a5U0hs2mbeD-kAeZwIXJY89-pI"
bot = Bot(token=TOKEN)
app = Flask(__name__)

# Logging setup
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

def send_message(chat_id, text, reply_markup=None):
    bot.send_message(chat_id=chat_id, text=text, reply_markup=reply_markup)

def start(update, context):
    keyboard = [
        [InlineKeyboardButton("üìã –ì—É–π–≤—É—É–ª–≥—ã–Ω —Ñ–æ—Ä–º", callback_data="form")],
        [InlineKeyboardButton("üìà –•–∞–Ω—à", callback_data="rate")],
        [InlineKeyboardButton("üí∞ –®–∏–º—Ç–≥—ç–ª", callback_data="fee")],
        [InlineKeyboardButton("üìë –ë–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç", callback_data="docs")],
        [InlineKeyboardButton("‚ÑπÔ∏è –ë–∏–¥–Ω–∏–π —Ç—É—Ö–∞–π", callback_data="about")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text("–¢–∞ –¥–æ–æ—Ä—Ö —Ü—ç—Å–Ω—ç—ç—Å —Å–æ–Ω–≥–æ–Ω–æ —É—É.", reply_markup=reply_markup)

def handle_message(update, context):
    text = update.message.text.lower()
    if any(key in text for key in ["—Ö–∞–Ω—à", "hansh"]):
        send_message(update.message.chat.id, "üìà –ú–∞–Ω–∞–π —Ö–∞–Ω—à: 1 —é–∞–Ω—å = 462‚ÇÆ")
    elif any(key in text for key in ["—à–∏–º—Ç–≥—ç–ª", "shimtgel"]):
        send_message(update.message.chat.id, """üí∞ –®–∏–º—Ç–≥—ç–ª–∏–π–Ω —à–∞—Ç–ª–∞–ª:
1¬• - 1,000¬• = 3,000‚ÇÆ + 30¬•
1,000¬• - 10,000¬• = 5,000‚ÇÆ
10,000¬•+ = 10,000-25,000‚ÇÆ""")
    elif any(key in text for key in ["–±–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç", "barimt", "bichig", "barimt"]):
        send_message(update.message.chat.id, "üìë –ë“Ø—Ä–¥“Ø“Ø–ª—ç—Ö –±–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç:
–ò–ª–≥—ç—ç–≥—á, —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞–≥—á–∏–π–Ω –±–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç
–î–∞–Ω—Å–Ω—ã –¥—É–≥–∞–∞—Ä, –±–∞–Ω–∫–Ω—ã –Ω—ç—Ä
–ì“Ø–π–ª–≥—ç—ç–Ω–∏–π —É—Ç–≥–∞")
    elif any(key in text for key in ["—Ç—É—Ö–∞–π", "company", "about", "bid"]):
        send_message(update.message.chat.id, "‚ÑπÔ∏è –ë–∏–¥–Ω–∏–π —Ç—É—Ö–∞–π:
–°–∞–π–Ω –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω—å 7 –∂–∏–ª–∏–π–Ω —Ç—É—Ä—à —Ö–∞—Ä–∏–ª—Ü–∞–≥—á–¥—ã–Ω —Å–∞–Ω—Ö“Ø“Ø–≥–∏–π–Ω —Ö—ç—Ä—ç–≥—Ü—ç—ç–≥ —Ö—è–ª–±–∞—Ä—à—É—É–ª–∞—Ö –∑–æ—Ä–∏–ª–≥–æ—Ç–æ–π –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞.")
    elif any(key in text for key in ["—É—Ç–∞—Å", "dugaar", "utas", "holboo"]):
        send_message(update.message.chat.id, "üìû –•–æ–ª–±–æ–æ –±–∞—Ä–∏—Ö: 80908090")
    else:
        start(update, context)

def handle_callback(update, context):
    query = update.callback_query
    data = query.data
    if data == "rate":
        send_message(query.message.chat_id, "üìà –ú–∞–Ω–∞–π —Ö–∞–Ω—à: 1 —é–∞–Ω—å = 462‚ÇÆ")
    elif data == "fee":
        send_message(query.message.chat_id, "üí∞ –®–∏–º—Ç–≥—ç–ª–∏–π–Ω —à–∞—Ç–ª–∞–ª:
1¬• - 1,000¬• = 3,000‚ÇÆ + 30¬•
1,000¬• - 10,000¬• = 5,000‚ÇÆ
10,000¬•+ = 10,000-25,000‚ÇÆ")
    elif data == "docs":
        send_message(query.message.chat_id, """üìë –ë“Ø—Ä–¥“Ø“Ø–ª—ç—Ö –±–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç:
–ò–ª–≥—ç—ç–≥—á, —Ö“Ø–ª—ç—ç–Ω –∞–≤–∞–≥—á–∏–π–Ω –±–∏—á–∏–≥ –±–∞—Ä–∏–º—Ç
–î–∞–Ω—Å–Ω—ã –¥—É–≥–∞–∞—Ä, –±–∞–Ω–∫–Ω—ã –Ω—ç—Ä
–ì“Ø–π–ª–≥—ç—ç–Ω–∏–π —É—Ç–≥–∞""")
    elif data == "about":
        send_message(query.message.chat_id, "‚ÑπÔ∏è –ë–∏–¥–Ω–∏–π —Ç—É—Ö–∞–π:
–°–∞–π–Ω –¢—Ä–∞–Ω—Å—Ñ–µ—Ä –Ω—å 7 –∂–∏–ª–∏–π–Ω —Ç—É—Ä—à —Ö–∞—Ä–∏–ª—Ü–∞–≥—á–¥—ã–Ω —Å–∞–Ω—Ö“Ø“Ø–≥–∏–π–Ω —Ö—ç—Ä—ç–≥—Ü—ç—ç–≥ —Ö—è–ª–±–∞—Ä—à—É—É–ª–∞—Ö –∑–æ—Ä–∏–ª–≥–æ—Ç–æ–π –∞–∂–∏–ª–ª–∞–∂ –±–∞–π–Ω–∞.")
    elif data == "form":
        send_message(query.message.chat_id, "üìã –ì—É–π–≤—É—É–ª–≥—ã–Ω —Ñ–æ—Ä–º –±”©–≥–ª”©—Ö —Ö—ç—Å—ç–≥ (—à–∏–Ω—ç—á–ª—ç–≥–¥—ç–∂ –±–∞–π–Ω–∞)...")

@app.route(f"/{TOKEN}", methods=["POST"])
def webhook():
    update = Update.de_json(request.get_json(force=True), bot)
    dp.process_update(update)
    return "ok"

@app.route("/")
def index():
    return "Telegram bot is running"

dp = Dispatcher(bot, None, workers=0, use_context=True)
dp.add_handler(CommandHandler("start", start))
dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_message))
dp.add_handler(MessageHandler(Filters.command, handle_message))
dp.add_handler(MessageHandler(Filters.all, handle_message))
dp.add_handler(MessageHandler(Filters.callback_query, handle_callback))

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
